import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;

/**
 * Implementation of the ClientConsoleUI
 * 
 * @author Alex Bowen
 * @version 0.0.1
 *
 */

public class ClientConsoleUI implements IClientConsoleUI 
{
	//TEMPORARY list of saved servers
	private LinkedList<SavedServerInfo> _savedServers = new LinkedList<SavedServerInfo>(Arrays.asList(
			new SavedServerInfo("192.168.1.2", "SomeServer"),
			new SavedServerInfo("172.16.5.7", "Dorks of Zork"),
			new SavedServerInfo("66.66.66.66", "A Whole Other Level")
			));
	
	private Scanner _kb;

	private SavedServerInfo _selectedServer;
	
	public ClientConsoleUI(Scanner kb)
	{
		_kb = kb;
	}
	
	@Override
	public void startUI()
	{
		NextUIScreenEnum nextScreen = NextUIScreenEnum.MainMenu;
		
		do{
			
			switch(nextScreen)
			{
			case MainMenu:
				nextScreen = mainMenu();
				break;
			case AddServer:
				nextScreen = addServer();
				break;
			case SavedServers:
				nextScreen = savedServers();
				break;
			case PlayGame:
				return;
			case Quit:
				return;
			}
			
		}while(true);
	}
	
	@Override
	public NextUIScreenEnum mainMenu() 
	{
		clearScreen();
		System.out.print(ConsoleUIConstants.C_8025WelcomeScreen);
		
		String input;

		input = _kb.nextLine().toLowerCase();
		
		if(input.equals("a") || input.equals("add") || input.equals("add server"))
		{
			return NextUIScreenEnum.AddServer;
		}
		else if(input.equals("s") || input.equals("saved") || input.equals("saved servers"))
		{
			return NextUIScreenEnum.SavedServers;
		}
		else if(input.equals("q") || input.equals("quit"))
		{
			return NextUIScreenEnum.Quit;
		}
		else
		{
			return NextUIScreenEnum.MainMenu;
		}
	}

	@Override
	public NextUIScreenEnum addServer() 
	{
		clearScreen();
		System.out.print("Enter new Server IP: ");
		String newIP = _kb.nextLine();
		System.out.println("Retrieving info for DORK server on " + newIP + "...");
		String serverName = "A new server";	
		System.out.println("Successfully found server " + serverName + " on " + newIP + ".");
		
		SavedServerInfo newServer = new SavedServerInfo(newIP, serverName);
		
		boolean inList = false;
		
		for(SavedServerInfo s : _savedServers)
		{
			if(s.equals(newServer))
			{
				inList = true;
				break;
			}
		}
		
		if(!inList)
		{
			System.out.print("Save in list? ");
			if(_kb.nextLine().toLowerCase().contains("y"))
			{
				_savedServers.add(newServer);
			}
		}
		else
		{
			System.out.println("Server is already saved!");
		}
		
		if(!_savedServers.isEmpty())
		{
			return NextUIScreenEnum.SavedServers;
		}
		else
		{
			return NextUIScreenEnum.MainMenu;
		}
	}

	@Override
	public NextUIScreenEnum savedServers() 
	{
		if(_savedServers.isEmpty())
		{
			System.out.println("No saved Servers!");
			System.out.print("Add server?");
			if(_kb.nextLine().toLowerCase().contains("y"))
			{
				return NextUIScreenEnum.AddServer;
			}
			else
			{
				return NextUIScreenEnum.MainMenu;
			}
		}
		
		clearScreen();
		
		System.out.print(ConsoleUIConstants.C_SavedServersHeader);
		
		for(int i = 0; i < _savedServers.size(); i++)
		{
			System.out.print("│");
			System.out.printf("%3d", i);
			System.out.print("│");
			System.out.print(_savedServers.get(i).getServerName());
			
			//formatting to 79 char width, used width is bars plus number plus server name
			int padding = 79 - 6 - _savedServers.get(i).getServerName().length();
			for(int j = 0; j < padding; j++)
			{
				System.out.print(" ");
			}
			
			System.out.print("│\n");
		}
		
		System.out.print(ConsoleUIConstants.C_SavedServersFooter);
		
		String input;

		input = _kb.nextLine().toLowerCase();
		
		if(input.equals("a") || input.equals("add") || input.equals("add server"))
		{
			return NextUIScreenEnum.AddServer;
		}
		else if(input.equals("q") || input.equals("quit"))
		{
			return NextUIScreenEnum.Quit;
		}
		else
		{
			try
			{
				int selectedServer = Integer.parseInt(input);
				_selectedServer = _savedServers.get(selectedServer);
				return (selectedSer) ? NextUIScreenEnum.PlayGame : NextUIScreenEnum.SavedServers;
			}
			catch(Exception e)
			{
				return NextUIScreenEnum.SavedServers;
			}
		}
	}
	
	private void clearScreen()
	{
		try
	    {
	        final String os = System.getProperty("os.name");

	        if (os.contains("Windows"))
	        {
	            Runtime.getRuntime().exec("cls");
	        }
	        else
	        {
	            Runtime.getRuntime().exec("clear");
	        }
	    }
	    catch (final Exception e)
	    {
	        //if this fails, at least get to a new line
	    	System.out.println();
	    }
	}
}
